{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "widget-20",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://wigggle-ui.vercel.app/r/widget.json",
    "https://wigggle-ui.vercel.app/r/badge.json",
    "https://wigggle-ui.vercel.app/r/button.json",
    "https://wigggle-ui.vercel.app/r/separator.json"
  ],
  "files": [
    {
      "path": "registry/default/widgets/widget-20.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useMemo } from \"react\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\n\r\nimport {\r\n  Widget,\r\n  WidgetContent,\r\n  WidgetHeader,\r\n  WidgetTitle,\r\n} from \"@/registry/default/ui/widget\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\n\r\nexport default function WidgetDemo() {\r\n  const [date, setDate] = useState(new Date());\r\n  const { getFullYear: y, getMonth: m } = date;\r\n  const [year, month] = [y.call(date), m.call(date)];\r\n\r\n  const calendarDays = useMemo(() => {\r\n    const firstDay = new Date(year, month, 1).getDay();\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    return [\r\n      ...Array(firstDay).fill(null),\r\n      ...Array.from({ length: daysInMonth }, (_, i) => i + 1),\r\n    ];\r\n  }, [year, month]);\r\n\r\n  const changeMonth = (step: number) =>\r\n    setDate((d) => new Date(d.getFullYear(), d.getMonth() + step, 1));\r\n\r\n  const isToday = (day: number | null) =>\r\n    day &&\r\n    new Date(year, month, day).toDateString() === new Date().toDateString();\r\n\r\n  const monthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" }).format(\r\n    new Date(year, month),\r\n  );\r\n  const days = Array.from(\r\n    { length: 7 },\r\n    (_, i) =>\r\n      new Intl.DateTimeFormat(\"en-US\", { weekday: \"short\" }).format(\r\n        new Date(2025, 0, i + 4),\r\n      )[0],\r\n  );\r\n\r\n  return (\r\n    <Widget className=\"gap-2\" design=\"mumbai\">\r\n      <WidgetHeader>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n          className=\"size-4 p-0 hover:cursor-pointer\"\r\n          onClick={() => changeMonth(-1)}\r\n        >\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n        <WidgetTitle>\r\n          {monthName} {year}\r\n        </WidgetTitle>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n          className=\"size-4 p-0 hover:cursor-pointer\"\r\n          onClick={() => changeMonth(1)}\r\n        >\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n        </Button>\r\n      </WidgetHeader>\r\n      <Separator className=\"h-0.5 rounded-full\" />\r\n      <WidgetContent>\r\n        <div className=\"grid size-full grid-cols-7 gap-1 text-center\">\r\n          {days.map((d) => (\r\n            <div key={d} className=\"text-xs\">\r\n              {d}\r\n            </div>\r\n          ))}\r\n          {calendarDays.map((d, i) => (\r\n            <div key={i} className=\"text-muted-foreground text-xs\">\r\n              {d && isToday(d) ? (\r\n                <Badge className=\"flex size-4 items-center justify-center p-2\">\r\n                  {d}\r\n                </Badge>\r\n              ) : (\r\n                d\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </WidgetContent>\r\n    </Widget>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "calendar"
    ]
  }
}